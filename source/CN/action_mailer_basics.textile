h2. Action Mailer Basics

本教程将告诉你如何让你的应用程序可以发送和接收邮件，还有 Action Mailer 的一些内部原理。 同时也包括如何编写 Mailer 的测试。

endprologue.

.WARNING 这份教程对应版本为3.0,在最新版本的Rails上跑或许会出现问题。

h3. 简介

Action Mailer 让你的应用可以用一个 mailer 的 model 和 views 来发送邮件。所以，在 Rails 里面，邮件是通过一个继承至 +ActionMailer::Base+ 的 mailer 来创建的，并存放在 +app/mailers+ 目录下面。这些 mailer 将依靠在 +app/views+ 目录下面对应名称的 view 来生成。

h3. 发送邮件

本节将一步一步的教你创建一个 mailer 和它对应的 views。

h4. 生成一个 Mailer

h5. 创建 Mailer

<shell>
$ rails generate mailer UserMailer
create  app/mailers/user_mailer.rb
invoke  erb
create    app/views/user_mailer
invoke  test_unit
create    test/functional/user_mailer_test.rb
</shell>

现在就有了一个 mailer, 还有它的 view 和 test 文件.

h5. 修改 Mailer

+app/mailers/user_mailer.rb+ 里面有个空的 mailer 类:

<ruby>
class UserMailer < ActionMailer::Base
  default :from => "from@example.com"
end
</ruby>

让我们来添加一个叫 +welcome_email+ 的方法, 它将用于发送用户注册成功的邮件:

<ruby>
class UserMailer < ActionMailer::Base
  default :from => "notifications@example.com"

  def welcome_email(user)
    @user = user
    @url  = "http://example.com/login"
    mail(:to => user.email, :subject => "欢迎来到我的网站")
  end
end
</ruby>

这里的方法就展示了一个简单的邮件项目，要想用上更多可用的选项，你可以在下文中可以找到一个完整的 Action Mailer 的参数设置选项表。而在这里

* <tt>default 哈希</tt> - 这是一个邮件的必选参数，在这个例子里我们在类的顶部设定了<tt>:from</tt>参数，这个参数是可以在每封具体邮件的内部修改的。
* +mail+ - 在这个 email 文件中，我们对其设置了 <tt>:to</tt> 和 <tt>:subject</tt> 参数.

就和控制器一样，我们这个类的实例方法中定义的任何变量都将可以用在 View 中使用。

h5. 创建 Mailer 视图

我们在  +app/views/user_mailer/+ 建立一个 Email 的模板文件叫 +welcome_email.html.erb+，用 HTML 语言进行书写它：

<erb>
<!DOCTYPE html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  </head>
  <body>
    <h1>Welcome to example.com, <%= @user.name %></h1>
    <p>
      You have successfully signed up to example.com,
      your username is: <%= @user.login %>.<br/>
    </p>
    <p>
      To login to the site, just follow this link: <%= @url %>.
    </p>
    <p>Thanks for joining and have a great day!</p>
  </body>
</html>
</erb>

为你的 email 的文字部分分离出来会是不错的选择，在 +app/views/user_mailer/+ 下建立一个文件 +welcome_email.text.erb+：

<erb>
Welcome to example.com, <%= @user.name %>
===============================================

You have successfully signed up to example.com,
your username is: <%= @user.login %>.

To login to the site, just follow this link: <%= @url %>.

Thanks for joining and have a great day!
</erb>

当你调用了 +mail+ 方法之后， Action Mailer 将会为你检测两种模板文件(text 和 HTML)然后为你自动生成一个 email 文件。

h5. 用户注册后自动发送邮件

这里有几种方法来实现这件事情，有的人会建立一个 Rails 观察者模型来监视注册事件，还有一些人会在用户模型中实现这一功能。然而，在 Rails 3 中，mailer 有了第三种方法去实现它，与原来渲染视图之后通过 HTTP 协议发送，他们现在只需要通过 Email 协议直接发送邮件就可以了。因此，你可以在用户成功注册之后直接通过控制器来发送命令给 mailer 发送邮件。

而要做到这样的功能简直是易如反掌。

首先我们先建立一个 User scaffold：

<shell>
$ rails generate scaffold user name:string email:string login:string
$ rake db:migrate
</shell>

这样我们就有了 用户模型了，我们将要编辑 +app/controllers/users_controller.rb+ 来让 UserMailer 为新建立的用户发送一封邮件，我们在 create 行为中当用户成功 save 之后调用了一个方法<tt>UserMailer.welcome_email</tt>。

<ruby>
class UsersController < ApplicationController
  # POST /users
  # POST /users.json
  def create
    @user = User.new(params[:user])

    respond_to do |format|
      if @user.save
        # Tell the UserMailer to send a welcome Email after save
        UserMailer.welcome_email(@user).deliver

        format.html { redirect_to(@user, :notice => 'User was successfully created.') }
        format.json { render :json => @user, :status => :created, :location => @user }
      else
        format.html { render :action => "new" }
        format.json { render :json => @user.errors, :status => :unprocessable_entity }
      end
    end
  end
end
</ruby>

这样就轻松地实现了目标，不需要观察者之类的东西。
方法 +welcome_email+ 返回一个 <tt>Mail::Message</tt> 对象，它会像 +deliver+ 请求把它自己发送出去。

NOTE: 在过去几个版本里的 Rails ，你需要调用 +deliver_welcome_email+ 或 +create_welcome_email+。它们在 Rails 3.0 中被弃用了，你只需要调用这个方法名本身即可。

WARNING: 发送一封邮件可能需要花费将近一秒的时间，如果你需要一次性发送好几封邮件，或者你不想因此降低主机的处理俗入，你恐怕要考虑下使用一个后台处理软件，例如 Delayed　Job.

h4. 多字节问题

Action Mailer 已经解决了文中的多字节编码问题。

如果你用　UTF-8　作为你的字符集，你什么都不用做，直接用　UTF-8　编码填写邮件地址，主题，关键词，文件名和邮件正文，如果邮件头部或者正文中出现了非　US-ASCII　编码部分， Action Mailer 会自动把他们转码为可读的版本（quoted printable）。

关于更为复杂的编码问题，例如在正文中编写了多种字符集，请参考　Ｍａｉｌ　类库。　

h4. Action Mailer 方法全列表

其实不管你发什么邮件都只需要三个方法就够了：

* <tt>headers</tt> - 指定你邮件的头部，你可以传入一个哈希来把头部作为数据的键值对，然后你就可以这么用 <tt>headers[:field_name] = 'value'</tt>
* <tt>attachments</tt> - 允许你添加附件到你的　ｅｍａｉｌ　中　例如 <tt>attachments['file-name.jpg'] = File.read('file-name.jpg')</tt>
* <tt>mail</tt> - 发送邮件。你可以把头部数据以哈希的形式传入， mail　将会根据你的模板生成　Ｅｍａｉｌ　.

h5. 自定义头部部分

自定义头部很简单，你只需要用三步就能够完成：

* 把头部作为一个参数传入　+mail+ 方法:
　
<ruby>
mail("X-Spam" => value)
</ruby>

* 传递一个键值对参数到　+headers+　方法:

<ruby>
headers["X-Spam"] = value
</ruby>

* 传递一个哈希到　+headers+　方法:

<ruby>
headers {"X-Spam" => value, "X-Special" => another_value}
</ruby>

TIP: 所有的 <tt>X-Value</tt> 头部　每 RFC2822 可以出现多次. 如果你想要删除一个　<tt>X-Value</tt>　头，你需要将其值声明成　<tt>nil</tt> .

h5. 添加附件

添加附件在　Action Mailer 3.0　中得到了大大的简化.

* 只要传入　文件名的内容之后 Action Mailer 和 Mail 插件将会自动对其　mime_type　进行检测，并对应进行编码和创建附件.

<ruby>
attachments['filename.jpg'] = File.read('/path/to/filename.jpg')
</ruby>

NOTE: Mail 插件将会自动地将附件进行　Base64　编码, 如果你对这一特性不太满意，你可以将其事先编码之后把内容和编码形式用哈希一并传入　+attachments+ 方法.

* 传入文件名和特殊的头部内容，为　Action Mailer 和 Mail　进行设置.

<ruby>
encoded_content = SpecialEncode(File.read('/path/to/filename.jpg'))
attachments['filename.jpg'] = {:mime_type => 'application/x-gzip',
                               :encoding => 'SpecialEncoding',
                               :content => encoded_content }
</ruby>

NOTE: 如果你用了一种指定的编码形式， Mail　将会认为你的内容是已经经过编码的，并不再尝试地对其内容进行　Base64 编码.

h5. 创建内联附件

* 首先，要通知 Mail 将一个附件转换成内联附件，你需要调用 Mailer 附件方法之中的 <tt>#inline</tt> 函数。

<ruby>
def welcome
  attachments.inline['image.jpg'] = File.read('/path/to/image.jpg')
end

* 然后在你的视图中，你可以指定 <tt>attachments[]</tt> 作为一个哈希参数来传入你想要展示的附件，调用 +url+ ,然后把结果传入 <tt>image_tag</tt> 方法中去：

<erb>
<p>Hello there, this is our image</p>

<%= image_tag attachments['image.jpg'].url %>
</erb>

* 这里以默认选项调用了 +image_tag+ 方法,你可以在这里象对待其他图像一样处理内联附件，在 <tt>image_tag</tt> 后面加上一些参数。

<erb>
<p>Hello there, this is our image</p>

<%= image_tag attachments['image.jpg'].url, :alt => 'My Photo',
                                            :class => 'photos' %>
</erb>

h5. 发送多个收件人的信件

你可以为你的邮件加入多个的收件人（例如每当有一个新用户注册就通知所有的管理员。）,你需要给邮件中的 <tt>:to</tt> 参数设定一个列表。这个列表可以用数组的形式，也可以用以逗号隔开的email地址的字符串组成.

<ruby>
class AdminMailer < ActionMailer::Base
  default :to => Proc.new { Admin.pluck(:email) },
          :from => "notification@example.com"

  def new_registration(user)
    @user = user
    mail(:subject => "New User Signup: #{@user.email}")
  end
end
</ruby>

对应地，用  <tt>:cc</tt> and <tt>:bcc</tt>  可以对carbon copy 和 blind carbon copy 可以进行同样的设置，

The same format can be used to set carbon copy (Cc:) and blind carbon copy (Bcc:) recipients, by using the <tt>:cc</tt> and <tt>:bcc</tt> keys respectively.

h5. 发送带名字的邮件

有时候，你想要收件人在邮件地址的地方现实一个名字来代替地址信息，想要做到这个需要一个小技巧，就是把你的邮件地址用<tt>"Name &lt;email&gt;"</tt> 这样的格式编写就可以了。

<ruby>
def welcome_email(user)
  @user = user
  email_with_name = "#{@user.name} <#{@user.email}>"
  mail(:to => email_with_name, :subject => "Welcome to My Awesome Site")
end
</ruby>

h4. Mailer Views

Mailer 试图位于 +app/views/name_of_mailer_class+ 目录下，通常情况下，mailer 视图的名字要和 mailer 里面的方法相对应，在我们上面的例子当中，我们的 mailer 方法 welcome_email+ 对应的HTML版就应该位于+app/views/user_mailer/welcome_email.html.erb+ ,而文字版视图文件应该位于+welcome_email.text.erb+ .

如果要对此默认的设置做出更改，你需要做一点这样的工作:

<ruby>
class UserMailer < ActionMailer::Base
  default :from => "notifications@example.com"

  def welcome_email(user)
    @user = user
    @url  = "http://example.com/login"
    mail(:to => user.email,
         :subject => "Welcome to My Awesome Site",
         :template_path => 'notifications',
         :template_name => 'another')
  end
end
</ruby>

这样，你的邮件模板就会以 +another+ 为名，在+app/views/notifications+ 中寻找。

如果你寻求更加简洁的方式，你可以传入一个 block 来指定渲染的模板，甚至直接在 block 中指定一个字符串。

<ruby>
class UserMailer < ActionMailer::Base
  default :from => "notifications@example.com"

  def welcome_email(user)
    @user = user
    @url  = "http://example.com/login"
    mail(:to => user.email,
         :subject => "Welcome to My Awesome Site") do |format|
      format.html { render 'another_template' }
      format.text { render :text => 'Render text' }
    end
  end

end
</ruby>

这样设置，mailer将会用模板 'another_template.html.erb' 来渲染 HTML 部分，用 文字来渲染 text 部分。在这里，render 命令的用法和 Action Controller 中的用法是一样的，所以他们有着同样的传入参数选项，这意味着你可以使用<tt>:text</tt>, <tt>:inline</tt> 等参数。

h4. Mailer 布局文件

和控制器视图一样，你同样可以创建mailer 布局文件，布局文件名要和你的mailer 控制器名字一样，例如+user_mailer.html.erb+ 和 +user_mailer.text.erb+ 就能够被自动识别成mailer的一个布局文件。

如果要使用不同名字的文件你就需要这样：

<ruby>
class UserMailer < ActionMailer::Base
  layout 'awesome' # use awesome.(html|text).erb as the layout
end
</ruby>

和控制器视图文件一样，用 +yield+ 去渲染布局中的视图文件。

你同样可以在format 的block 中传入 <tt>:layout => 'layout_name'</tt> 选项调用 render 函数来指定不同的布局文件或者方法。

<ruby>
class UserMailer < ActionMailer::Base
  def welcome_email(user)
    mail(:to => user.email) do |format|
      format.html { render :layout => 'my_layout' }
      format.text
    end
  end
end
</ruby>

这样将会用 <tt>my_layout.html.erb</tt> 渲染 HTML 视图 用 <tt>user_mailer.text.erb</tt> 渲染 text 视图.

h4. 在 Action Mailer 视图中生成 URL.

URL 可以在视图中使用 +url_for+ 方法或者命名路由方法生成.

但是和控制器不同，Mailer 实例无法得到任何请求的信息，所以你需要为方法提供  +:host+, +:controller+ 和 +:action+: 参数

<erb>
<%= url_for(:host => "example.com",
            :controller => "welcome",
            :action => "greeting") %>
</erb>

当使用命名路由方法时你只需要提供 +:host+ 参数：

<erb>
<%= user_url(@user, :host => "example.com") %>
</erb>

对于一个邮件客户端来说，它并不存在地址上的信息去生成网络地址，因此，当你使用命名路由方法的时候只能用 "_url" 后缀的 helper 方法.

事先为 mailer 做好默认主机名的设置也是一个不错的方法，你可以在 <tt>config/application.rb</tt> 设置文件中的 <tt>:host</tt> 中设置你的主机名。

<ruby>
config.action_mailer.default_url_options = { :host => "example.com" }
</ruby>

如果你用了这个设定，你最好在使用  +url_for+ 方法的时候传入 <tt>:only_path => false</tt> 参数. 这样可以保证每当 +url_for+ 调用都能返回一个绝对地址。

h4. 发送复合邮件 

如果对于同一个 action 你有不同的模板，Action Mailer 将会自动地为你生成发送复合邮件 , 以我们的 UserMailer 作为例子，如果你在 +app/views/user_mailer+ 下面同时存在 +welcome_email.text.erb+ 和 +welcome_email.html.erb+ ,  Action Mailer 将会自动地把 HTML 和 text 部分合成一份并发送。

复合邮件的顺序依据<tt>ActionMailer::Base.default</tt> 方法中的 <tt>:parts_order</tt> 参数。如果你想要精确地控制邮件内容的顺序，你可以改变<tt>:parts_order</tt> 参数或者指定邮件用不同的顺序渲染。

class UserMailer < ActionMailer::Base
  def welcome_email(user)
    @user = user
    @url  = user_url(@user)
    mail(:to => user.email,
         :subject => "Welcome to My Awesome Site") do |format|
      format.html
      format.text
    end
  end
end
</ruby>

这样将会先输入 HTML 部分，后输出 text 部分。

h4. 发送带附件的邮件

附件可以使用  +attachments+ 方法：

<ruby>
class UserMailer < ActionMailer::Base
  def welcome_email(user)
    @user = user
    @url  = user_url(@user)
    attachments['terms.pdf'] = File.read('/path/terms.pdf')
    mail(:to => user.email,
         :subject => "Please see the Terms and Conditions attached")
  end
end
</ruby>

这样就可以生成一份带附件的邮件了。

h3. 接收邮件 

用 Action Mailer 解析和接收邮件相对来说比较复杂，因为你需要在邮件还未到达你的服务器之前就做好监听邮件的工作，你需要配置好你的系统的接收方式。要想要一个 Rails 程序接收邮件你需要:

* 在你的 Mailer 中哦实现 +receive+ 函数。

* 配置好你的email 服务器的转发邮件地址，你的程序将会收到 +/path/to/app/script/rails runner 'UserMailer.receive(STDIN.read)'+.

一旦叫做  +receive+ 在 Mailer 中被设置， Action Mailer 将会处理接收到的 Email 并保存在一个新的实例化的邮件对象中去，例子如下：

<ruby>
class UserMailer < ActionMailer::Base
  def receive(email)
    page = Page.find_by_address(email.to.first)
    page.emails.create(
      :subject => email.subject,
      :body => email.body
    )

    if email.has_attachments?
      email.attachments.each do |attachment|
        page.attachments.create({
          :file => attachment,
          :description => email.subject
        })
      end
    end
  end
end
</ruby>

h3. 使用 Action Mailer Helpers


Action Mailer 现在集成自一个抽象的 Controller 类，你可以调用 Action Controller 的通用 Helper .

h3. Action Mailer 设置

以下配置可以在你的环境配置文件 (environment.rb, production.rb...)
中被找到:

|+template_root+|Determines the base from which template references will be made.|
|+logger+|Generates information on the mailing run if available. Can be set to +nil+ for no logging. Compatible with both Ruby's own +Logger+ and +Log4r+ loggers.|
|+smtp_settings+|Allows detailed configuration for <tt>:smtp</tt> delivery method:<ul><li><tt>:address</tt> - Allows you to use a remote mail server. Just change it from its default "localhost" setting.</li><li><tt>:port</tt>  - On the off chance that your mail server doesn't run on port 25, you can change it.</li><li><tt>:domain</tt> - If you need to specify a HELO domain, you can do it here.</li><li><tt>:user_name</tt> - If your mail server requires authentication, set the username in this setting.</li><li><tt>:password</tt> - If your mail server requires authentication, set the password in this setting.</li><li><tt>:authentication</tt> - If your mail server requires authentication, you need to specify the authentication type here. This is a symbol and one of <tt>:plain</tt>, <tt>:login</tt>, <tt>:cram_md5</tt>.</li></ul>|
|+sendmail_settings+|Allows you to override options for the <tt>:sendmail</tt> delivery method.<ul><li><tt>:location</tt> - The location of the sendmail executable. Defaults to <tt>/usr/sbin/sendmail</tt>.</li><li><tt>:arguments</tt> - The command line arguments to be passed to sendmail. Defaults to <tt>-i -t</tt>.</li></ul>|
|+raise_delivery_errors+|Whether or not errors should be raised if the email fails to be delivered.|
|+delivery_method+|Defines a delivery method. Possible values are <tt>:smtp</tt> (default), <tt>:sendmail</tt>, <tt>:file</tt> and <tt>:test</tt>.|
|+perform_deliveries+|Determines whether deliveries are actually carried out when the +deliver+ method is invoked on the Mail message. By default they are, but this can be turned off to help functional testing.|
|+deliveries+|Keeps an array of all the emails sent out through the Action Mailer with delivery_method :test. Most useful for unit and functional testing.|

h4. Action Mailer 配置范例

你可以在你的 环境配置文件(<tt>config/environments/$RAILS_ENV.rb</tt>)中做出如下配置

<ruby>
config.action_mailer.delivery_method = :sendmail
# Defaults to:
# config.action_mailer.sendmail_settings = {
#   :location => '/usr/sbin/sendmail',
#   :arguments => '-i -t'
# }
config.action_mailer.perform_deliveries = true
config.action_mailer.raise_delivery_errors = true
</ruby>

h4. Action Mailer 和 GMail

因为 Action Mailer 现在使用 Mail gem，所以把你的 Action Mailer 和 一个Gmail绑定变得轻而易举。你 需要把设定写入你的 <tt>config/environments/$RAILS_ENV.rb</tt> 文件:

<ruby>
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :address              => "smtp.gmail.com",
  :port                 => 587,
  :domain               => 'baci.lindsaar.net',
  :user_name            => '<username>',
  :password             => '<password>',
  :authentication       => 'plain',
  :enable_starttls_auto => true  }
</ruby>

h3. Mailer 测试

默认情况下， Action Mailer并不在测试环境中发送电子邮件。 他们只是将邮件添加到 ActionMailer :: Base.deliveries 队列中去。

测试寄件人通常考虑两件事情：一个是该邮件被送入发送队列，一个是保证电子邮件是正确的。 考虑到这一点，我们可以像这样测试我们的邮件：


<ruby>
class UserMailerTest < ActionMailer::TestCase
  def test_welcome_email
    user = users(:some_user_in_your_fixtures)

    # Send the email, then test that it got queued
    email = UserMailer.welcome_email(user).deliver
    assert !ActionMailer::Base.deliveries.empty?

    # Test the body of the sent email contains what we expect it to
    assert_equal [user.email], email.to
    assert_equal "Welcome to My Awesome Site", email.subject
    assert_match(/<h1>Welcome to example.com, #{user.name}<\/h1>/, email.encoded)
    assert_match(/Welcome to example.com, #{user.name}/, email.encoded)
  end
end
</ruby>

在测试中，我们发送并保存返回的邮件对象。然后，我们确保它被送出（第一个断言），然后，在第二个断言中，我们确保该电子邮件确实包含我们所期望的邮件。

