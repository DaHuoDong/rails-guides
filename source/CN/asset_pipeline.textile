h2. Asset Pipeline

这个指南涵盖了在 Rails 3.1 引入的 asset pipling.
通过浏览这个指南，你将能：

* 理解 asset pipline 是什么和如何使用它
* 合理的管理应用程序的资源
* 了解 asset pipline 的优点
* 为 pipeline 添加预处理器
* 用一个 gem 打包资源

endrpologue.

h3. 什么是 Asset Pipline?

asset pipline 是一个提供合并缩小或者压缩 JavaScript 和 CSS 资源的框架。它也添加了用其它语言编写这些资源的功能, 如 CoffeeScript, Sass 和 ERB。

在 Rails 3.1 之前这些功能都是通过第三方 Ruby 库添加进来的，如 Jammit 和 Sprockets. Rails 3.1 默认是通过 Action Pack 和 Sprockets 交互的，这要依赖 +sprockets+ gem.

使 asset pipline 成为 Rails 的核心功能意味着所有的开发者都能从其强大的功能收益，这些功能是使用一个中心库，Sprockets, 将资源预处理，压缩和缩小。 这是 Rails 的 "fast by default" 策略的一部分，这个策略是 DHH 在 RailsConf 2011 概述中的主旨。

在 Rails 3.1 中，asset pipline 是默认开启的。它可在 +config/application.rb+ 里被关闭，只要将以下这行放到应用程序类定义里:

<ruby>
config.assets.enabled = false
</ruby>

你也可以在创建一个新应用程序的时候投递 <tt>--skip-sprockets</tt> 参数来关闭 asset pipline.

<plain>
rails new appname --skip-sprockets
</plain>

你应该在所有的新应用程序中默认使用它，除非你有特殊的原因去避免使用 asset pipline.

h4. 主要功能

pipline 的第一个功能就是合并资源。这在生产环境非常重要，因为它可以避免浏览器为了渲染页面而不得不发送过多的请求。网页浏览器限制了并行请求的数量， 所以更少的请求能让你的应用程序加载更快。

Rails 2.x 介绍了将 +:cache => true+ 放置到 +javascript_include_tag+ 或 +stylesheet_link_tag+ 方法的尾部能合并 JavaScript 或 CSS 资源。但这个技术有些不足。例如，它不能预先产生缓存和它不能显式调用由第三方库提供的资源。

#FIXME： so that...
从 3.1 版开始， Rails 默认将所有的 JavaScript 文件合并成一个主要的 +.js+ 文件，和将所有的 CSS 文件合并成一个主要的 +.css+ 文件。 你将可以在本指南后面学习到如何自定义管理这些文件的策略。在生产环境中， 文件被网页浏览器缓存后，Rails 给每个文件名插入一个 MD5 指纹。你通过修改指纹使缓存无效，这在你修改文件后会自动发生。

#FIXME: a set of build.
asset pipline 的第二个功能是资源的缩小或者压缩。对于 CSS 文件，是通过去除空格和注释来实现的。对于 JavsScript, 会有更多的复杂过程。你可以选择一系列可选的构建或者你自己指定。

asset pipline 的第三个功能是它能你使用更高级的语言来编写资源，然后预编译成实质的资源。默认支持的语言包括 CSS 的 Sass，JavaScript 的 CoffeeScript 和可用于所有资源的 ERB.

h4. 什么是指纹识别和为什么我们要关心

指纹识别是一项使一个文件的名字根据文件的内容而定的技术。当文件的内容改变了，文件名也会变。
